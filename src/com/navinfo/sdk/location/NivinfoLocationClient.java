package com.navinfo.sdk.location;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Locale;import android.content.Context;import android.location.Criteria;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Bundle;import com.navinfo.sdk.location.NivinfoLocationClientOption.LocationMode;import com.tencent.map.geolocation.TencentLocation;import com.tencent.map.geolocation.TencentLocationListener;import com.tencent.map.geolocation.TencentLocationManager;import com.tencent.map.geolocation.TencentLocationRequest;/** * 定位服务的客户端。宿主程序在客户端声明此类，并调用 */public class NivinfoLocationClient {	/*	 *  腾讯定位的参数	 */	private Context mContext;	private StringBuilder mHistoryStatus = new StringBuilder();	//定位请求设置类, 客户端使用本类指定定位周期等参数.	private NivinfoLocationClientOption locOption;	//腾讯定位管理类，用来发起定位请求	private TencentLocationManager mLocationManager;	//腾讯定位请求设置类, 客户端使用本类指定定位周期等参数.	private TencentLocationRequest request;	//腾讯定位位置改变回调函数	private MyLocationListener locationListener;	/*	 *  封装的定位sdk参数	 */     //sdk	定位信息类	private NivinfoLocation niLocation;	//sdk定位监听	private NivinfoLocationListener niLocationListener;   //	是否开启腾讯定位	private boolean isInit = false;	/*	 * 自实现gps定位参数	 */	public LocationManager gpsLocationManager;	public SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");// 设置日期格式	public Location gpslocation;	public String latLongString;	public NivinfoLocationClient(Context context) {		mContext = context;	}	/**	 * 获取LocationClientOption	 */	public NivinfoLocationClientOption getLocOption() {		return locOption;	}	/**	 * 设置 LocationClientOption	 * 	 * @param locOption	 */	public void setLocOption(NivinfoLocationClientOption locOption) {		this.locOption = locOption;	}	/**	 * 开启定位	 */	public void start() {		if (locOption.getLocMode()==LocationMode.Device_Sensors) {//			gps定位			startGps();		} else {			mLocationManager = TencentLocationManager.getInstance(mContext);			request = TencentLocationRequest.create();			locationListener = new MyLocationListener();			isInit = true;			updateStatus("start");//			腾讯开始定位			startLocation();		}	}/* *  gps定位 */	private void startGps() {		// TODO Auto-generated method stub		gpsLocationManager = (LocationManager) mContext				.getSystemService(Context.LOCATION_SERVICE);		String provider = LocationManager.GPS_PROVIDER;		// 查找到服务信息		Criteria criteria = new Criteria();		criteria.setAccuracy(Criteria.ACCURACY_FINE);		//是否显示地理高度		criteria.setAltitudeRequired(false);		criteria.setBearingRequired(false);		criteria.setCostAllowed(true);		criteria.setPowerRequirement(Criteria.POWER_LOW);		provider = gpsLocationManager.getBestProvider(criteria, true);		// 通过GPS获取位置		gpslocation = gpsLocationManager.getLastKnownLocation(provider);		updateWithNewLocation(gpslocation);		gpsLocationManager.requestLocationUpdates(provider, 2000, 10,				gpsLocationListener);	}	//gps更新定位信息	private void updateWithNewLocation(Location location) {		setNiLocationListener(niLocationListener);		niLocation = new NivinfoLocation();		if (location != null) {			double lat = location.getLatitude();// 经度			//sdk定位信息经度			 niLocation.setLatitude(lat);			double lng = location.getLongitude();// 纬度			//sdk定位信息维度			 niLocation.setLongitude(lng);			float spe = location.getSpeed();// 速度			//sdk定位信息速度			 niLocation.setSpeed(spe);			float acc = location.getAccuracy();// 精度			//sdk定位信息精度			 niLocation.setAccuracy(acc);			double alt = location.getAltitude();// 海拔			//sdk定位信息海拔			 niLocation.setAltitude(alt);			float bea = location.getBearing();// 轴承			//sdk定位信息轴承			 niLocation.setBearing(bea);			long tim = location.getTime();			// 返回UTC时间1970年1月1毫秒			 niLocation.setTime(tim);			niLocationListener.onLocationChanged(niLocation,TencentLocation.ERROR_OK, "定位成功");			updateStatus(getDateFormat() + ":定位成功 - " + niLocation);			setNiLocationListener(niLocationListener);		} else {			// 定位失败			niLocationListener.onLocationChanged(niLocation,TencentLocation.ERROR_BAD_JSON, "GPS卫星信号引起的定位失败");			updateStatus(getDateFormat() + ": 定位失败 - " +"GPS卫星信号引起的定位失败" );		}	}	private final LocationListener gpsLocationListener = new LocationListener() {		public void onProviderEnabled(String provider) {		}		public void onProviderDisabled(String provider) {		}		public void onLocationChanged(Location location) {			updateWithNewLocation(location);		}		@Override		public void onStatusChanged(String provider, int status, Bundle extras) {			// TODO Auto-generated method stub					}	};	/**	 * 返回最后一次定位结果	 * 	 * @return	 */	public NivinfoLocation getLastKnownLocation() {		return null;	}	/**	 * 停止定位	 */	public void stop() {		updateStatus("stop");		 // 停止腾讯定位		stopLocation();	}	private void startLocation() {		if (!isInit) {			mLocationManager = TencentLocationManager.getInstance(mContext);			request = TencentLocationRequest.create();			locationListener = new MyLocationListener();		}		if (null != locOption) {			// 设置定位参数			mLocationManager.setCoordinateType(locOption.getCoordinateType());			request.setInterval(locOption.getMillis());			request.setRequestLevel(locOption.getRequestLevel());		} else {			// 没有设置定位参数时【默认】			NivinfoLocationClientOption option = new NivinfoLocationClientOption();			mLocationManager.setCoordinateType(option.getCoordinateType());			request.setInterval(option.getMillis());			request.setRequestLevel(option.getRequestLevel());		}		registerLocationListener(locationListener);	}	private void stopLocation() {		unRegisterLocationListener(locationListener);	}	/**	 * 更新状态	 * 	 * @param status	 */	public void updateStatus(String status) {		mHistoryStatus.insert(0, status);		if (mHistoryStatus.length() > 20 * 1000) {			mHistoryStatus.setLength(0);			mHistoryStatus.insert(0, "自动清空");		}	}	/**	 * 清空状态	 */	public void clearStatus() {		mHistoryStatus.setLength(0);	}	/**	 * 注册定位监听函数	 * 	 * @param niLocationListner	 */	private void registerLocationListener(MyLocationListener mLocationListener) {		mLocationManager.requestLocationUpdates(request, mLocationListener);	}	/**	 * 取消注册的定位监听函数	 */	private void unRegisterLocationListener(MyLocationListener mLocationListener) {		mLocationManager.removeUpdates(mLocationListener);	}	/**	 * 设置定位监听函数	 * 	 * @param niLocationListener	 */	public void setNiLocationListener(NivinfoLocationListener niLocationListener) {		this.niLocationListener = niLocationListener;	}	/**	 * 获取当前的时间	 * 	 * @return	 */	public static String getDateFormat() {		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(				"yyyy-MM-dd HH:mm:ss", Locale.getDefault());		Date date = new Date();		return simpleDateFormat.format(date);	}	/**	 * 腾讯定位位置改变回调函数	 */	class MyLocationListener implements TencentLocationListener {		@Override		public void onLocationChanged(TencentLocation location, int error,				String reason) {			setNiLocationListener(niLocationListener);			niLocation = new NivinfoLocation();			if (TencentLocation.ERROR_OK == error) {				// 定位成功				niLocation.setAccuracy(location.getAccuracy());				niLocation.setAddress(location.getAddress());				niLocation.setAltitude(location.getAltitude());				niLocation.setAreaStat(location.getAreaStat());				niLocation.setBearing(location.getBearing());				niLocation.setCity(location.getCity());				niLocation.setDistrict(location.getDistrict());				niLocation.setExtra(location.getExtra());				niLocation.setLatitude(location.getLatitude());				niLocation.setLongitude(location.getLongitude());				niLocation.setName(location.getName());				niLocation.setNation(location.getNation());				niLocation.setProvider(location.getProvider());				niLocation.setProvince(location.getProvince());				niLocation.setSpeed(location.getSpeed());				niLocation.setStreet(location.getStreet());				niLocation.setStreetNo(location.getStreetNo());				niLocation.setTime(location.getTime());				niLocation.setTown(location.getTown());				niLocation.setVillage(location.getVillage());				niLocationListener.onLocationChanged(niLocation, error, reason);				updateStatus(getDateFormat() + ":定位成功 - " + location);			} else {				// 定位失败				niLocationListener.onLocationChanged(niLocation, error, reason);				updateStatus(getDateFormat() + ": 定位失败 - " + reason);			}		}		@Override		public void onStatusUpdate(String name, int status, String desc) {			setNiLocationListener(niLocationListener);			niLocationListener.onStatusUpdate(name, status, desc);		}	}}