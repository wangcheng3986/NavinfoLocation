package com.navinfo.sdk.location;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Locale;import android.content.Context;import android.location.Criteria;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Bundle;import android.util.Log;import com.navinfo.sdk.location.NavinfoLocationClientOption.LocationMode;import com.tencent.map.geolocation.TencentLocation;import com.tencent.map.geolocation.TencentLocationListener;import com.tencent.map.geolocation.TencentLocationManager;import com.tencent.map.geolocation.TencentLocationRequest;/** * 定位服务的客户端。宿主程序在客户端声明此类，并调用 */public class NavinfoLocationClient {	/*	 *  腾讯定位的参数	 */	private Context mContext;	//定位请求设置类, 客户端使用本类指定定位周期等参数.	private NavinfoLocationClientOption locOption;	//腾讯定位管理类，用来发起定位请求	private TencentLocationManager mLocationManager;	//腾讯定位位置改变回调函数	private MyLocationListener locationListener;			    //定位信息	private NavinfoLocation niLocation;	//定位监听	private ArrayList< NavinfoLocationListener > mListenerList;	public NavinfoLocationClient(Context context) {		mContext = context;	}	/**	 * 获取LocationClientOption	 */	public NavinfoLocationClientOption getLocOption() {		return locOption;	}	/**	 * 设置 LocationClientOption	 * 	 * @param locOption	 */	public void setLocOption(NavinfoLocationClientOption locOption) {		this.locOption = locOption;	}	/**	 * 开启定位	 */	public void start() {		TencentLocationRequest request = null;		if (locationListener == null) {			mLocationManager = TencentLocationManager.getInstance(mContext);			locationListener = new MyLocationListener();		}		if (null != locOption) {			// 设置定位参数			request = locOption.getRequest();			mLocationManager.setCoordinateType(locOption.getCoordinateType());		} else {			request = TencentLocationRequest.create();			mLocationManager.setCoordinateType(TencentLocationManager.COORDINATE_TYPE_GCJ02);		}		mLocationManager.requestLocationUpdates(request, locationListener);	}	private NavinfoLocation convertTencentLocation( TencentLocation location){		if(location != null){			if(niLocation == null){				niLocation = new NavinfoLocation();			}			niLocation.setAccuracy(location.getAccuracy());			niLocation.setAddress(location.getAddress());			niLocation.setAltitude(location.getAltitude());			niLocation.setAreaStat(location.getAreaStat());			niLocation.setBearing(location.getBearing());			niLocation.setCity(location.getCity());			niLocation.setDistrict(location.getDistrict());			niLocation.setExtra(location.getExtra());			niLocation.setLatitude(location.getLatitude());			niLocation.setLongitude(location.getLongitude());			niLocation.setName(location.getName());			niLocation.setNation(location.getNation());			niLocation.setProvider(location.getProvider());			niLocation.setProvince(location.getProvince());			niLocation.setSpeed(location.getSpeed());			niLocation.setStreet(location.getStreet());			niLocation.setStreetNo(location.getStreetNo());			niLocation.setTime(location.getTime());			niLocation.setTown(location.getTown());			niLocation.setVillage(location.getVillage());			Log.e("wcloc","niLocation="+niLocation.toString());			return niLocation;		}		return null;	}	/**	 * 返回最后一次定位结果	 * 	 * @return	 */	public NavinfoLocation getLastKnownLocation() {		TencentLocation loc = mLocationManager.getLastKnownLocation();		return convertTencentLocation(loc);	}	/**	 * 停止定位	 */	public void stop() {		 // 停止腾讯定位		mLocationManager.removeUpdates(locationListener);	}	/**	 * 设置定位监听函数	 * 	 * @param niLocationListener	 */	public void setNILocationListener(NavinfoLocationListener niLocationListener) {		Log.e("wcloc","setNILocationListener="+niLocationListener.hashCode());		if(mListenerList == null){			Log.e("wcloc","setNILocationListener=1");			mListenerList = new ArrayList< NavinfoLocationListener > ();		}else{			Log.e("wcloc","setNILocationListener=2");			for(NavinfoLocationListener l : mListenerList){				if(l.equals(niLocationListener)){					Log.e("wcloc","setNILocationListener=3");					return;				}			}		}		Log.e("wcloc","setNILocationListener=4");		mListenerList.add(niLocationListener);	}		public boolean removeNILocationListener(NavinfoLocationListener niLocationListener) {		if(mListenerList != null){			Log.e("wcloc","removeNILocationListener="+niLocationListener.hashCode());			return mListenerList.remove(niLocationListener);		}		return false;	}		/**	 * 腾讯定位位置改变回调函数	 */	class MyLocationListener implements TencentLocationListener {		@Override		public void onLocationChanged(TencentLocation location, int error,				String reason) {			Log.e("wcloc","onLocationChanged");			if(mListenerList != null ){				for(NavinfoLocationListener l : mListenerList){					if(locOption != null){						LocationMode mode = locOption.getLocMode();						switch(mode){						case Device_Sensors:							if(location.getAccuracy() <= 20 ){								l.onLocationChanged(convertTencentLocation(location), error, reason);							}							break;						case Battery_Saving:						case Hight_Accuracy:							l.onLocationChanged(convertTencentLocation(location), error, reason);							break;						}					}									}			}					}		@Override		public void onStatusUpdate(String name, int status, String desc) {			Log.e("wcloc","onStatusUpdate--"+name+","+ status+","+ desc);			if(mListenerList != null ){				for(NavinfoLocationListener l : mListenerList){					l.onStatusUpdate(name, status, desc);				}			}		}	}}