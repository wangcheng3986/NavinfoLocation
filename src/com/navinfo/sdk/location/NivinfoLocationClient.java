package com.navinfo.sdk.location;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Locale;import android.content.Context;import android.location.Criteria;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Bundle;import com.navinfo.sdk.location.NivinfoLocationClientOption.LocationMode;import com.tencent.map.geolocation.TencentLocation;import com.tencent.map.geolocation.TencentLocationListener;import com.tencent.map.geolocation.TencentLocationManager;import com.tencent.map.geolocation.TencentLocationRequest;/** * @author min */public class NivinfoLocationClient {	// 腾讯定位的参数	private Context mContext;	private StringBuilder mHistoryStatus = new StringBuilder();	private NivinfoLocationClientOption locOption;	private TencentLocationManager mLocationManager;	private TencentLocationRequest request;	private MyLocationListener locationListener;	private NivinfoLocation niLocation;	// 封装的定位sdk参数	private NivinfoLocationListener niLocationListener;	private boolean isInit = false;	// gps定位	public LocationManager gpsLocationManager;	public SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");// 设置日期格式	public Location gpslocation;    public	String latLongString;	public NivinfoLocationClient(Context context) {		mContext = context;	}	/**	 * 获取LocationClientOption	 * 	 * @return	 */	public NivinfoLocationClientOption getLocOption() {		return locOption;	}	/**	 * 设置 LocationClientOption	 * 	 * @param locOption	 */	public void setLocOption(NivinfoLocationClientOption locOption) {		this.locOption = locOption;	}	/**	 * 开启定位SDK	 */	public void start() {		if (locOption.getLocMode() == LocationMode.Device_Sensors) {			startGps();		} else {			mLocationManager = TencentLocationManager.getInstance(mContext);			request = TencentLocationRequest.create();			locationListener = new MyLocationListener();			isInit = true;			updateStatus("start");			startLocation();// 腾讯开始定位		}	}	private void startGps() {		// TODO Auto-generated method stub		gpsLocationManager = (LocationManager) mContext				.getSystemService(Context.LOCATION_SERVICE);		String provider = LocationManager.GPS_PROVIDER;		// 查找到服务信息		Criteria criteria = new Criteria();		criteria.setAccuracy(Criteria.ACCURACY_FINE);		criteria.setAltitudeRequired(false);		criteria.setBearingRequired(false);		criteria.setCostAllowed(true);		criteria.setPowerRequirement(Criteria.POWER_LOW);		 gpslocation = gpsLocationManager.getLastKnownLocation(provider); // 通过GPS获取位置		provider = gpsLocationManager.getBestProvider(criteria, true);		 gpslocation = gpsLocationManager.getLastKnownLocation(provider);		updateWithNewLocation( gpslocation);		gpsLocationManager.requestLocationUpdates(provider, 2000, 10,				gpsLocationListener);	}//	private void updateWithNewLocation(Location location) {		if (location != null) {			double lat = location.getLatitude();// 经度			double lng = location.getLongitude();// 纬度			float spe = location.getSpeed();// 速度			float acc = location.getAccuracy();// 精度			double alt = location.getAltitude();// 海拔			float bea = location.getBearing();// 轴承			long tim = location.getTime();// 返回UTC时间1970年1月1毫秒			latLongString = "纬度:" + lat + "\n经度:" + lng + "\n精度：" + acc					+ "\n速度：" + spe + "\n海拔：" + alt + "\n轴承：" + bea + "\n时间："					+ sdf.format(tim);		} else {			latLongString ="定位信息失败！";//           Toast.makeText(mContext, "卫星定位gps失败，已经为你切换到了混合定位，请稍候。。。", Toast.LENGTH_SHORT).show();//			mLocationManager = TencentLocationManager.getInstance(mContext);//			request = TencentLocationRequest.create();//			locationListener = new MyLocationListener();//			isInit = true;//			updateStatus("start");//			startLocation();// 腾讯开始定位		}		System.out.println("gps定位信息为："+latLongString);	}	private final LocationListener gpsLocationListener = new LocationListener() {		public void onStatusChanged(String provider, int status, Bundle extras) {		}		public void onProviderEnabled(String provider) {		}		public void onProviderDisabled(String provider) {		}		public void onLocationChanged(Location location) {			updateWithNewLocation(location);		}	};	/**	 * 返回最后一次定位结果	 * 	 * @return	 */	public NivinfoLocation getLastKnownLocation() {		return null;	}	/**	 * 停止定位SDK	 */	public void stop() {		updateStatus("stop");		stopLocation(); // 停止腾讯定位	}	/**	 * 开始定位	 */	public void startLocation() {		if (!isInit) {			mLocationManager = TencentLocationManager.getInstance(mContext);			request = TencentLocationRequest.create();			locationListener = new MyLocationListener();		}		if (null != locOption) {// 设置定位参数			mLocationManager.setCoordinateType(locOption.getCoordinateType());			request.setInterval(locOption.getMillis());			request.setRequestLevel(locOption.getRequestLevel());		} else {// 没有设置定位参数时【默认】			NivinfoLocationClientOption option = new NivinfoLocationClientOption();			mLocationManager.setCoordinateType(option.getCoordinateType());			request.setInterval(option.getMillis());			request.setRequestLevel(option.getRequestLevel());		}		registerLocationListener(locationListener);	}	/**	 * 停止定位	 */	public void stopLocation() {		unRegisterLocationListener(locationListener);	}	/**	 * 更新状态	 * 	 * @param status	 */	public void updateStatus(String status) {		mHistoryStatus.insert(0, status);		if (mHistoryStatus.length() > 20 * 1000) {			mHistoryStatus.setLength(0);			mHistoryStatus.insert(0, "自动清空");		}	}	/**	 * 清空状态	 */	public void clearStatus() {		mHistoryStatus.setLength(0);	}	/**	 * 注册定位监听函数	 * 	 * @param niLocationListner	 */	private void registerLocationListener(MyLocationListener mLocationListener) {		mLocationManager.requestLocationUpdates(request, mLocationListener);	}	/**	 * 取消注册的定位监听函数	 */	private void unRegisterLocationListener(MyLocationListener mLocationListener) {		mLocationManager.removeUpdates(mLocationListener);	}	/**	 * 设置定位监听函数	 * 	 * @param niLocationListener	 */	public void setNiLocationListener(NivinfoLocationListener niLocationListener) {		this.niLocationListener = niLocationListener;	}	/**	 * 获取当前的时间	 * 	 * @return	 */	public static String getDateFormat() {		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(				"yyyy-MM-dd HH:mm:ss", Locale.getDefault());		Date date = new Date();		return simpleDateFormat.format(date);	}	/**	 * 位置改变回调函数	 */	class MyLocationListener implements TencentLocationListener {		@Override		public void onLocationChanged(TencentLocation location, int error,				String reason) {			setNiLocationListener(niLocationListener);			niLocation = new NivinfoLocation();			if (TencentLocation.ERROR_OK == error) {// 定位成功				niLocation.setAccuracy(location.getAccuracy());				niLocation.setAddress(location.getAddress());				niLocation.setAltitude(location.getAltitude());				niLocation.setAreaStat(location.getAreaStat());				niLocation.setBearing(location.getBearing());				niLocation.setCity(location.getCity());				niLocation.setDistrict(location.getDistrict());				niLocation.setExtra(location.getExtra());				niLocation.setLatitude(location.getLatitude());				niLocation.setLongitude(location.getLongitude());				niLocation.setName(location.getName());				niLocation.setNation(location.getNation());				niLocation.setProvider(location.getProvider());				niLocation.setProvince(location.getProvince());				niLocation.setSpeed(location.getSpeed());				niLocation.setStreet(location.getStreet());				niLocation.setStreetNo(location.getStreetNo());				niLocation.setTime(location.getTime());				niLocation.setTown(location.getTown());				niLocation.setVillage(location.getVillage());				niLocationListener.onLocationChanged(niLocation, error, reason);				updateStatus(getDateFormat() + ":定位成功 - " + location);			} else {// 定位失败				niLocationListener.onLocationChanged(niLocation, error, reason);				updateStatus(getDateFormat() + ": 定位失败 - " + reason);			}		}		@Override		public void onStatusUpdate(String name, int status, String desc) {			setNiLocationListener(niLocationListener);			niLocationListener.onStatusUpdate(name, status, desc);		}	}}